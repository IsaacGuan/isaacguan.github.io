<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Isaac&#39;s Blog</title>
  
  <subtitle>Ayant le soleil en face, il faut que nous vivons fièrement</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://isaacguan.github.io/"/>
  <updated>2017-12-24T02:38:55.548Z</updated>
  <id>https://isaacguan.github.io/</id>
  
  <author>
    <name>Isaac Guan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Implementation of Voronoi Diagram and Delaunay Triangulation</title>
    <link href="https://isaacguan.github.io/implementation-of-voronoi-diagram-and-delaunay-triangulation/"/>
    <id>https://isaacguan.github.io/implementation-of-voronoi-diagram-and-delaunay-triangulation/</id>
    <published>2017-12-22T05:00:00.000Z</published>
    <updated>2017-12-24T02:38:55.548Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Voronoi_diagram" target="_blank" rel="external">Voronoi diagram</a> and <a href="https://en.wikipedia.org/wiki/Delaunay_triangulation" target="_blank" rel="external">Delaunay triangulation</a> are dual representations of a set of points to each other. Due to their wide application in science and technology, Voronoi diagram and Delaunay triangulation play important roles in the field of Computational Geometry. In this post, I am going to introduce an implementation of an algorithm to derive both Voronoi Diagram and Delaunay Triangulation of a set of points in the plane.</p><h1 id="Voronoi-Diagram-and-Delaunay-Triangulation"><a href="#Voronoi-Diagram-and-Delaunay-Triangulation" class="headerlink" title="Voronoi Diagram and Delaunay Triangulation"></a>Voronoi Diagram and Delaunay Triangulation</h1><p>The Voronoi diagram of a set of points, also known as Thiessen polygons, is a partitioning of a plane into regions by a set of continuous polygons consisting of perpendicular bisectors of the connecting lines of two adjacent points. These regions are called Voronoi cells. And for each point in the set, there is a corresponding Voronoi cell consists of all points closer to that point than to any other.</p><p>The Delaunay triangulation of a set of points is dual to its Voronoi diagram. It is a collection of connected but non-overlapping triangles, and the outer circumcircle of these triangles does not contain any other points in this set.</p><h1 id="Design-of-the-Algorithm"><a href="#Design-of-the-Algorithm" class="headerlink" title="Design of the Algorithm"></a>Design of the Algorithm</h1><p>There is a diversity of ways to generate a Voronoi diagram from a set of points in the plane. In this implementation, I obtained the Voronoi diagram from generating its dual, the Delaunay triangulation. Generally speaking, for the set of $n$ points $P={p_1, p_2, …, p_n}$ in $\mathbb{R}^2$, the algorithm goes in this way: the Delaunay triangulation of the set of points is firstly generated, then we calculate the center of the circumcircle of each triangle and finally we connect these centers with straight lines and form the polygon mesh generated from the vertices of the triangles.</p><h2 id="Design-of-the-Data-Structure"><a href="#Design-of-the-Data-Structure" class="headerlink" title="Design of the Data Structure"></a>Design of the Data Structure</h2><p>I implemented this algorithm in object oriented language, so the design of data structure is in the form of class.</p><p>Point:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Point</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> x, y, z;</div><div class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">int</span>&gt; adjoinTriangles;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> z</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">        <span class="keyword">this</span>.z = z;</div><div class="line">        adjoinTriangles = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Voronoi edge:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">VoronoiEdge</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> Point start, end;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoronoiEdge</span>(<span class="params">Point start, Point end</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">this</span>.start = start;</div><div class="line">        <span class="keyword">this</span>.end = end;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Delaunay edge:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">DelaunayEdge</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> start, end;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelaunayEdge</span>(<span class="params"><span class="keyword">int</span> start, <span class="keyword">int</span> end</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">this</span>.start = start;</div><div class="line">        <span class="keyword">this</span>.end = end;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Triangle:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Triangle</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> vertex1, vertex2, vertex3;</div><div class="line">    <span class="keyword">public</span> Point center;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> radius;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span>(<span class="params"><span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> vertex3</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">this</span>.vertex1 = vertex1;</div><div class="line">        <span class="keyword">this</span>.vertex2 = vertex2;</div><div class="line">        <span class="keyword">this</span>.vertex3 = vertex3;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>On top of that, I defined a point list and a triangle list under the Collections class to store all the points in the point set $P$ and all the triangles during the procedure of triangulation as global variables:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Collections</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Point&gt; allPoints;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Triangle&gt; allTriangles;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Thus, in the Point class, DelaunayEdge class and Triangle class, I can use an integer to represent the index of a certain point or triangle from the global lists, and retrieve it directly.</p><h2 id="Build-up-the-Vonoroi-Diagram"><a href="#Build-up-the-Vonoroi-Diagram" class="headerlink" title="Build up the Vonoroi Diagram"></a>Build up the Vonoroi Diagram</h2><p>The algorithm of building up a Vonoroi diagram goes in this way:</p><p><strong><em>Begin</em></strong></p><p><em>Step 1:</em> Obtain the Delaunay triangulation by generating the list of Delaunay edges.</p><p><em>Step 2:</em> Traverse all the Delaunay edges.</p><p><em>Step 3:</em> For each Delaunay edge, traverse the two triangle lists stored with the start point and the end point, and find the two same triangles in the two lists which are the adjacent triangles of this Delaunay edge.</p><p><em>Step 4:</em> Construct a Voronoi edge by connecting the two centers of the circumcles of the two adjacent triangles and add it to the Voronoi edge list.</p><p><strong><em>End</em></strong></p><h2 id="Conduct-the-Delaunay-Triangulation"><a href="#Conduct-the-Delaunay-Triangulation" class="headerlink" title="Conduct the Delaunay Triangulation"></a>Conduct the Delaunay Triangulation</h2><p>I planned to apply the <a href="https://en.wikipedia.org/wiki/Bowyer%E2%80%93Watson_algorithm" target="_blank" rel="external">Bowyer–Watson algorithm</a> for computing the Delaunay triangulation. A most naïve Bowyer–Watson algorithm goes like this:</p><p><strong><em>Begin</em></strong></p><p><em>Step 1:</em> Construct a ‘super’ triangle that covers all the points from the point set, add it to the Delaunay triangle list. </p><p><em>Step 2:</em> Insert points from the point set $P={p_1, p_2, …, p_n}$ to the ‘super’ triangle one by one.</p><p><em>Step 3:</em> For each point $p_i$ inserted, traverse the Delaunay triangle list to find all the triangles whose circumcircles cover this point $p_i$ as invalid triangles, delete these triangles from the Delaunay triangle list and delete all the common edges of these triangles, and leave a star-shaped polygonal hole.</p><p><em>Step 4:</em> Connect the point $p_i$ to all the vertices of this star-shaped polygon, and add the newly formed triangles to the Delaunay triangle list.</p><p><em>Step 5:</em> After all the points are inserted, obtain the Delaunay edge list from the Delaunay triangle list, and delete the edges from the Delaunay edge list that contain a vertex of the original ‘super’ triangle.</p><p><strong><em>End</em></strong></p><p>The following pictures can better illustrate the key steps of this algorithm. As shown in <strong>Figure 1</strong>, when a new point is inserted, all the triangles whose circumcircles contain this point will be found. The common edges of these triangles, which are highlighted in yellow, will be deleted, leaving the star-shaped boundary in red.</p><p><img src="/img/implementation-of-voronoi-diagram-and-delaunay-triangulation_1.jpg" alt="Implementation of Voronoi Diagram and Delaunay Triangulation figure 1"></p><center><b>Figure 1</b></center><p>And then, the inserted point will be connected to all the vertices of the star-shaped polygon, as shown in <strong>Figure 2</strong>, the new Delaunay triangles will be formed.</p><p><img src="/img/implementation-of-voronoi-diagram-and-delaunay-triangulation_2.jpg" alt="Implementation of Voronoi Diagram and Delaunay Triangulation figure 2"></p><center><b>Figure 2</b></center><p>However, the aforementioned naïve manner of Delaunay triangulation is clearly an $O(n^2)$ time algorithm that is incapable of handling a massive amount of points.</p><p>For improving its efficiency, we can first sort the set of points by x-coordinate, and use an open list and a closed list to store all the Delaunay triangles. In each time a point is inserted, all the triangles with circumcircles to the left of the inserting point are put into the closed list and removed from the open list. All the new triangles generated in an insertion are put into the open list. So in each time of insertion, we just have to traverse the open list to find the invalid triangles, the length of the sequential search of triangles is much reduced.</p><p>Besides, in order to derive the Voronoi diagram, when a new point is inserted, all the newly formed triangles that are incident on the point are put into the triangle list that is stored with the point.</p><p>Thus, the optimized algorithm goes as follows:</p><p><strong><em>Begin</em></strong></p><p><em>Step 1:</em> Sort the points in the point set $P={p_1, p_2, …, p_n}$ by x-coordinate.</p><p><em>Step 2:</em> Construct a ‘super’ triangle that covers all the points from the point set, add it to the open list. </p><p><em>Step 3:</em> Insert points from $P$ to the ‘super’ triangle one by one in ascending order of x-coordinates.</p><p><em>Step 4:</em> For each point $p_i$ inserted, traverse the open list to: 1) find all the triangles with circumcircles lying to the left of the point $p_i$, delete these triangles from the open list and add them to the closed list; 2) find all the triangles with circumcircles covering this point $p_i$ as invalid triangles, delete these triangles from the open list and the triangle list stored with $p_i$, delete all the common edges of these triangles, leaving a star-shaped polygonal hole.</p><p><em>Step 5:</em> Connect the point $p_i$ to all the vertices of this star-shaped polygon, and add the newly formed triangles to the open list and the triangle list stored with $p_i$.</p><p><em>Step 6:</em> After all the points are inserted, merge the open list and the closed list into the Delaunay triangle list, obtain the Delaunay edge list from the Delaunay triangle list, and delete the edges from the Delaunay edge list that contain a vertex of the original ‘super’ triangle.</p><p><strong><em>End</em></strong></p><h1 id="Time-Complexity-of-the-Algorithm"><a href="#Time-Complexity-of-the-Algorithm" class="headerlink" title="Time Complexity of the Algorithm"></a>Time Complexity of the Algorithm</h1><p>The optimized algorithm for Delaunay triangulation takes $O(nlogn)$ time. As Delaunay triangulation is a planar graph, the number of triangles incident on one point is constant, so the procedure of finding adjacent triangles takes constant time and the time of generating Voronoi diagram is $O(n)$. Therefore, the total running time of this algorithm is $O(nlogn)$.</p><h1 id="Implementation-of-the-Algorithm"><a href="#Implementation-of-the-Algorithm" class="headerlink" title="Implementation of the Algorithm"></a>Implementation of the Algorithm</h1><p>This algorithm is implemented in C#. <strong>Figure 3</strong> shows the result of the implementation of this algorithm, it is capable of handling massive input of 10000 points.</p><p><img src="/img/implementation-of-voronoi-diagram-and-delaunay-triangulation_3.jpg" alt="Implementation of Voronoi Diagram and Delaunay Triangulation figure 3"></p><center><b>Figure 3:</b> Voronoi diagram and Delaunay triangulation for 10000 points.</center><p>The GitHub repository of this implementation is <a href="https://github.com/IsaacGuan/Voronoi-Delaunay" target="_blank" rel="external">IsaacGuan/Voronoi-Delaunay</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Voronoi_diagram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Voronoi diagram&lt;/a&gt; and &lt;a href=&quot;https://en.wikipe
      
    
    </summary>
    
    
      <category term="computational geometry" scheme="https://isaacguan.github.io/tags/computational-geometry/"/>
    
      <category term="voronoi diagram" scheme="https://isaacguan.github.io/tags/voronoi-diagram/"/>
    
      <category term="delaunay triangulation" scheme="https://isaacguan.github.io/tags/delaunay-triangulation/"/>
    
  </entry>
  
  <entry>
    <title>Width of a Set in the Plane</title>
    <link href="https://isaacguan.github.io/width-of-a-set-in-the-plane/"/>
    <id>https://isaacguan.github.io/width-of-a-set-in-the-plane/</id>
    <published>2017-11-19T05:00:00.000Z</published>
    <updated>2017-11-19T18:20:21.706Z</updated>
    
    <content type="html"><![CDATA[<p>The book <a href="http://reports-archive.adm.cs.cmu.edu/anon/anon/usr/ftp/scan/CMU-CS-80-101.pdf" target="_blank" rel="external"><em>Geometric Transforms for Fast Geometric Algorithms</em></a> introduces an interesting algorithm from page 84 of computing the diameter of a set of points in two dimensions. Inspired by this, I come up with a solution of computing the width of a set using geometric transformation.</p><h1 id="Definition-of-the-Width-of-a-Set"><a href="#Definition-of-the-Width-of-a-Set" class="headerlink" title="Definition of the Width of a Set"></a>Definition of the Width of a Set</h1><p>Let $S$ be a set of $n$ points in $\mathbb{R}^2$. If $l$ and $l’$ are two parallel lines, then the region between them is called a slab. The width of $S$ is defined to be the minimum distance between the bounding lines of any slab that contains all points of $S$.</p><h1 id="Characterization-of-the-Width"><a href="#Characterization-of-the-Width" class="headerlink" title="Characterization of the Width"></a>Characterization of the Width</h1><p>Before presenting the width-finding algorithm, I’d like first to characterize the width of a set of points, introduce some terminology and prove several theorems.</p><p>When we say that $A$ is contained in $B$, it means that every point of $A$ also lies in $B$. The bounding lines of a slab could contain a vertex or an edge of the convex hull $CH(S)$ of the set of points $S$.</p><p><strong>Theorem 1:</strong> Let $l$ and $l’$ be two parallel lines that define the width of $S$, both $l$ and $l’$ contain a vertex of the convex hull $CH(S)$ of $S$.</p><p><strong>Proof.</strong> Assume otherwise. The width is determined by parallel lines $l$ and $l’$, and $l$ contains a vertex of $CH(S)$, $l’$ does not, as shown in <strong>Figure 1</strong>. Then there must exists a line $l’’$ closer to the set of points $S$ and produces a smaller distance. Q.E.D.</p><p><img src="/img/width-of-a-set-in-the-plane_1.jpg" alt="width of a set in the plane figure 1"></p><center><b>Figure 1</b></center><p><strong>Theorem 2:</strong> Let $l$ and $l’$ be two parallel lines that define the width of $S$, at least one of $l$ and $l’$ contain an edge of the convex hull $CH(S)$ of $S$.</p><p><strong>Proof.</strong> Assume otherwise. The width is determined by parallel lines $l$ and $l’$ which both pass a vertex but neither of them passes an edge. We can rotate the parallel lines in preferred direction of rotation which means we rotate $l$ and $l’$ about the two vertices they pass to form new parallel lines $l_1$ and $l_1’$ and the distance between $l_1$ and $l_1’$ is smaller. This contradicts the assumption. Q.E.D.</p><h1 id="Computing-the-Width"><a href="#Computing-the-Width" class="headerlink" title="Computing the Width"></a>Computing the Width</h1><p>We can divide the convex hull into 2 parts: the upper hull and the lower hull, so that when one of the parallel lines of support of $S$ meets the convex hull on the upper hull, the other is on the lower hull.</p><p>According to the <a href="https://en.wikipedia.org/wiki/Linear_programming#Duality" target="_blank" rel="external">duality transformation</a>, a non-vertical line $y=kx+b$ can be transformed into the point $(k,b)$ which is formed by the slope and intercept of the line. And a point $(a,b)$ can be transformed into the line $y=k(x-a)+b$ which means the set of lines that pass through it.</p><p>Hence, we define the transform of an edge of the convex hull $CH(S)$ of $S$ as the slope of the line containing that edge and the transform of a vertex of $CH(S)$ as the set of slopes of lines that pass through it. I.e., the line containing an edge: $y=kx+b$ can be mapped to the one dimensional point $(k)$ and the vertex that lies between two edges: $y=k_1x+b_1$ and $y=k_2x+b_2$ can be mapped to the closed interval $[k_1,k_2]$. As shown in <strong>Figure 2</strong>, the convex hull is transformed into a line which consists of a upper part and a lower part.</p><p><img src="/img/width-of-a-set-in-the-plane_2.jpg" alt="width of a set in the plane figure 2"></p><center><b>Figure 2:</b> The transform.</center><p>As the slopes of the edges of the convex hull are already sorted, when we transform the convex hull to a line, the upper and lower sets of points and intervals on the line are in sorted order.</p><p>As is known from <strong>Theorem 1</strong>, the parallel lines of support pass through an edge and a vertex of the convex hull $CH(S)$, which means the corresponding point and interval pair contained in the parallel lines must intersect on the upper and lower lines, e.g., $P_5$ and $l_8$, $P_6$ and $l_2$ in <strong>Figure 2</strong>.</p><p>Thus, finding the width of a set of points $S$ can be reduced to scanning the intersections of point and interval pairs on the upper and lower hulls of its convex hull $CH(S)$.</p><p>To summarize, the width of a set of points $S$ can be computed in the following manner.</p><p><strong><em>Begin</em></strong></p><p><em>Step 1:</em> Construct the convex hull $CH(S)$ of $S$.</p><p><em>Step 2:</em> Apply the transform to obtain two ordered sets of points and intervals.</p><p><em>Step 3:</em> Scan the sets for intersections between the intervals of one set and the points of the other, generating the corresponding vertex and edge pair. For each such pair, compute the distance between the vertex and the extended edge, and note the smallest such distance. When the scan is complete, that distance is the width.</p><p><strong><em>End</em></strong></p><h1 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h1><p>According to the <a href="https://en.wikipedia.org/wiki/Gift_wrapping_algorithm" target="_blank" rel="external">gift wrapping algorithm</a> and the <a href="https://en.wikipedia.org/wiki/Graham_scan" target="_blank" rel="external">Graham scan algorithm</a>, the running time of finding the convex hull of a set of points can be minimized to $O(nlogh)$, where $h$ is the number of points on the convex hull. And obtaining the two ordered sets and scanning the sets both takes $O(h)$ time. Therefore, finding the width of a set of points $S$ in $\mathbb{R}^2$ takes $O(nlogh)$ time.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The book &lt;a href=&quot;http://reports-archive.adm.cs.cmu.edu/anon/anon/usr/ftp/scan/CMU-CS-80-101.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Geom
      
    
    </summary>
    
    
      <category term="computational geometry" scheme="https://isaacguan.github.io/tags/computational-geometry/"/>
    
      <category term="convex hull" scheme="https://isaacguan.github.io/tags/convex-hull/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://isaacguan.github.io/hello-world/"/>
    <id>https://isaacguan.github.io/hello-world/</id>
    <published>2017-11-01T04:00:00.000Z</published>
    <updated>2017-11-02T03:12:25.642Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Existence precedes essence.</p></blockquote><p>During the high school years, I once kept a diary, sort of artsy lifestyle possessed by the petty bourgeoisie. And this experience told me the truth that writing is really time consuming, especially when you are making ‘sentimental twaddle’ on trivial things in daily life.</p><p>Time flies. I haven’t been keeping that habit for a long time and I will be 23 this month. As every young man in his 20s, I feel at a loss from time to time. Looking back on the past few years, seemingly I have gone through a lot of things and met up with a lot of people, but future still remains uncertain.</p><p>Some people of this era are distressed and tend to explore the meaning of their existence. That is why I am quoting the words of <a href="https://en.wikipedia.org/wiki/Jean-Paul_Sartre" target="_blank" rel="external">Jean-Paul Sartre</a> at the beginning of this post. It tells that life could be meaningless according to my understanding, unless you create yourself a meaning.</p><p>But I cannot say that I am an existentialist. Existentialist should be fearless, like <a href="https://en.wikipedia.org/wiki/Friedrich_Nietzsche" target="_blank" rel="external">Nietzsche</a>, who asserted that ‘God is dead’. I am just following the guidance of these great philosophers to add something that I believe is meaningful to my life.</p><p>Thus, I decided to build this place and record something of myself, which generally includes:</p><ul><li>Something about my study (algorithms, programming, projects I am doing, etc.)</li><li>Something about my hobby (traveling, cycling, reading, photographing, etc.)</li><li>And more possibilities…</li></ul><p>It is lucky for me to live in this digital age, such that I can easily build up this small website on my own using <a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a> as blogging platform and <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> as framework. I also would like to express my thanks to <a href="https://github.com/fi3ework" target="_blank" rel="external">fi3ework</a> who designed this beautiful theme <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="external">archer</a> that I am using.</p><p>Anyhow, this is the very first post of my blog. Wish myself happy blogging :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Existence precedes essence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During the high school years, I once kept a diary, sort of artsy lifestyle 
      
    
    </summary>
    
    
      <category term="hello world" scheme="https://isaacguan.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
